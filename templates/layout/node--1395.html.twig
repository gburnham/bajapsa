{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
<article{{ attributes }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  <div{{ content_attributes }}>
    {{ content }}
    	<style>
		.clickable    {cursor: pointer};
		.elementid    {cursor: pointer};
		#eventsOldNew {cursor: pointer};
		.closeSignups {cursor: pointer};
	</style>
	<script>
		var statusURL = "/data.php?mode=events";
		var showOld = false;
		function runCron()
		{
			jQuery("#page").css("cursor", "wait");
			jQuery("#cronLink").css("cursor", "wait");
			jQuery.get("http://dev.apsacentral.ca/cron/piWfuzOjg8n51TcLJ7__tO4bdrKchMRDfVRPSG_qnndkhmGZmWWzlqu5TPDurjcRFjlsiSDOsQ");
			location.reload();
		}

		function showEvents()
		{
			var thisURL = statusURL;
			jQuery("#eventTable").html("");
			if (showOld) {
				thisURL += "&oldEvents";
				jQuery("#eventsOldNew").html("Showing past events (click to switch to viewing upcoming events)");
			}
			else {
				jQuery("#eventsOldNew").html("Showing upcoming events (click to switch to viewing past events)");
			}
			jQuery.get(thisURL, function(data) {
				var indexes = Object.keys(data);
				if (indexes.length > 0) {
					indexes.forEach(function (arrayElement) {
						var theElement = data[arrayElement];
						var theIndex = arrayElement;
						var signups = (theElement[1] == true ? "Yes" : "No");
						var elementEntry = "<div class='row event-details' id='element_" + theIndex + "'>";
						elementEntry += "<div class='col-xs-3 elementid em_event_id' data-id='" + theIndex + "' id='elementid_" + theIndex + "'>" + theIndex + "</div>";
						elementEntry += "<div class='col-xs-3 em_event_title' id='elementtitle_" + theIndex + "'>" + theElement[0] + "</div>";
						elementEntry += "<div class='col-xs-3 em_signups_allowed' id='elementsignups_" + theIndex + "'>" + signups  + "</div>";
						elementEntry += "<div class='col-xs-3 em_signups_num' id='elementattendees_" + theIndex + "'>" + theElement[2] + "</div>";
						elementEntry += "</div>";
						jQuery("#eventTable").html(jQuery("#eventTable").html() + elementEntry);
					});
				}
				jQuery(".elementid").click(function() {
					var eid = jQuery(this).attr("data-id");
					jQuery.get("/data.php?mode=events&details=" + eid, function(data) {
						var after = "#element_" + eid;
						var thisElement = "element_" + eid + "_details";

						// if this element already exists, remove it
						if (jQuery("#" + thisElement).length != 0) {
							jQuery("#" + thisElement).remove();
						}
						else {
							thisElement = "<div class='row' id='" + thisElement + "'>";
							thisElement += "<div class='col-xs-1'></div><div class='col-xs-4 clickable closeSignups' data-id='" + eid +"'>Close signups for this event</div><div class='col-xs-4 clickable saveAttended' data-id='" + eid +"'>Save Attendance</div><div class='col-xs-3'><a href='/node/add/event_email?eid=" + eid + "'>Send email to all attendees</a></div>";
							thisElement += "<div class='col-xs-1'>Attended</div>";
							thisElement += "<div class='col-xs-3'>Name</div>";
							thisElement += "<div class='col-xs-4'>Username</div>";
							thisElement += "<div class='col-xs-4'>Email</div>";
							if (data["signup_count"] > 0) {
								var indexes = Object.keys(data["signups"]);
								indexes.forEach(function (arrayElement) {
									var name = data["signups"][arrayElement][0];
									var username = data["signups"][arrayElement][1];
									var email = data["signups"][arrayElement][2];
									var attended = "";
									if (data["signups"][arrayElement][3] == 1) {
										attended = " checked ";
									}
									thisElement += "<div class='col-xs-1'><input type='checkbox' class='" + eid + "_attend' id='user_" + arrayElement + "' class='eventAttend' " + attended + "></div>";
									thisElement += "<div class='col-xs-3'>" + name + "</div>";
									thisElement += "<div class='col-xs-4'>" + username + "</div>";
									thisElement += "<div class='col-xs-4'>" + email + "</div>";
								});
							}
							else {
								thisElement += "<div class='col-xs-10 offset-xs-2'><em>No signups</em></div>";
							}
							thisElement += "</div>";
							jQuery(thisElement).insertAfter(jQuery(after));
							jQuery(".saveAttended").click(function() {
								var eid = jQuery(this).attr("data-id");
								var theClass = "." + eid + "_attend";
								var attended = new Array();
								jQuery(theClass).each(function(index, element) {
									if (jQuery(element).is(":checked")) {
										var elemID = element.getAttribute("id");
										var elemArray = elemID.split("_");
										attended.push(elemArray[1]);
									}
								});
								var queryString = "?mode=events&saveAttended=" + eid + "&attended=" + attended.toString();
								jQuery.get("/data.php" + queryString, function(data) {
									var thisElement = "#element_" + data["eid"] + "_details";
									jQuery(thisElement).hide(500);
									jQuery(thisElement).show(500);
								});
							});
							jQuery(".closeSignups").click(function() {
								var eid = jQuery(this).attr("data-id");
								jQuery.get("/data.php?mode=events&closeSignups=" + eid, function(data) {
									jQuery("#elementsignups_" + eid).html("No");
								});
							});
						}
					});
				});
			});
		}

		function checkStatus()
		{
			jQuery("#eventsOldNew").click(function() {
				showOld = !showOld;
				showEvents();
			});
			showEvents();
		}
	</script>
<div class="row">
<div class="col-xs-6 offset-xs-3 show-events" style="cursor: pointer;" id="eventsOldNew">Showing upcoming events (click to switch to viewing past events)</div>
</div>
<div class="row event-heading">
<div class="col-xs-3"><b>Event ID (click for details)</b></div>
<div class="col-xs-3"><b>Event Title</b></div>
<div class="col-xs-3"><b>Signups Allowed?</b></div>
<div class="col-xs-3"><b># of Signups</b></div>
</div>
<span id="eventTable"></span>

</article>
